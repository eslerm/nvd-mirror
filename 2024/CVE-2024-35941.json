{"id": "CVE-2024-35941", "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67", "published": "2024-05-19T11:15:49.823", "lastModified": "2024-05-20T13:00:04.957", "vulnStatus": "Awaiting Analysis", "descriptions": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet: skbuff: add overflow debug check to pull/push helpers\n\nsyzbot managed to trigger following splat:\nBUG: KASAN: use-after-free in __skb_flow_dissect+0x4a3b/0x5e50\nRead of size 1 at addr ffff888208a4000e by task a.out/2313\n[..]\n  __skb_flow_dissect+0x4a3b/0x5e50\n  __skb_get_hash+0xb4/0x400\n  ip_tunnel_xmit+0x77e/0x26f0\n  ipip_tunnel_xmit+0x298/0x410\n  ..\n\nAnalysis shows that the skb has a valid ->head, but bogus ->data\npointer.\n\nskb->data gets its bogus value via the neigh layer, which does:\n\n1556    __skb_pull(skb, skb_network_offset(skb));\n\n... and the skb was already dodgy at this point:\n\nskb_network_offset(skb) returns a negative value due to an\nearlier overflow of skb->network_header (u16).  __skb_pull thus\n\"adjusts\" skb->data by a huge offset, pointing outside skb->head\narea.\n\nAllow debug builds to splat when we try to pull/push more than\nINT_MAX bytes.\n\nAfter this, the syzkaller reproducer yields a more precise splat\nbefore the flow dissector attempts to read off skb->data memory:\n\nWARNING: CPU: 5 PID: 2313 at include/linux/skbuff.h:2653 neigh_connected_output+0x28e/0x400\n  ip_finish_output2+0xb25/0xed0\n  iptunnel_xmit+0x4ff/0x870\n  ipgre_xmit+0x78e/0xbb0"}, {"lang": "es", "value": "En el kernel de Linux, se resolvi\u00f3 la siguiente vulnerabilidad: net: skbuff: agregar verificaci\u00f3n de depuraci\u00f3n de desbordamiento a los asistentes de extracci\u00f3n/empuje syzbot logr\u00f3 activar el siguiente s\u00edmbolo: BUG: KASAN: use after free en __skb_flow_dissect+0x4a3b/0x5e50 Lectura de tama\u00f1o 1 en la direcci\u00f3n ffff888208a4000e por tarea a.out/2313 [..] __skb_flow_dissect+0x4a3b/0x5e50 __skb_get_hash+0xb4/0x400 ip_tunnel_xmit+0x77e/0x26f0 ipip_tunnel_xmit+0x298/0x410 .. El an\u00e1lisis muestra que el skb tiene un -&gt;head v\u00e1lido, pero falso -&gt;puntero de datos. skb-&gt;data obtiene su valor falso a trav\u00e9s de la capa vecina, que hace: 1556 __skb_pull(skb, skb_network_offset(skb)); ... y el skb ya era dudoso en este punto: skb_network_offset(skb) devuelve un valor negativo debido a un desbordamiento anterior de skb-&gt;network_header (u16). __skb_pull por lo tanto \"ajusta\" los datos skb-&gt; con un desplazamiento enorme, apuntando fuera del \u00e1rea principal de skb-&gt;. Permitir que las compilaciones de depuraci\u00f3n se ejecuten cuando intentamos extraer/enviar m\u00e1s de INT_MAX bytes. Despu\u00e9s de esto, el reproductor syzkaller produce un sonido m\u00e1s preciso antes de que el disector de flujo intente leer skb-&gt;memoria de datos: ADVERTENCIA: CPU: 5 PID: 2313 en include/linux/skbuff.h:2653 neigh_connected_output+0x28e/0x400 ip_finish_output2+ 0xb25/0xed0 iptunnel_xmit+0x4ff/0x870 ipgre_xmit+0x78e/0xbb0"}], "metrics": {}, "references": [{"url": "https://git.kernel.org/stable/c/1b2b26595bb09febf14c5444c873ac4ec90a5a77", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/219eee9c0d16f1b754a8b85275854ab17df0850a", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/8af60bb2b215f478b886f1d6d302fefa7f0b917d", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/fff05b2b004d9a8a2416d08647f3dc9068e357c8", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}]}